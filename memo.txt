login form = https://clerk.com/blog/building-a-react-login-page-template
lowdb downgraded, and it's working

<Link> instead of <a> link => state automatically saved

nginx crash course = https://www.youtube.com/watch?v=7VAI73roXaY

RESTART SSH
$ sudo service ssh restart

nginx = revers proxy, act as a load balancer too
good for scaling your app

npx kill-port 3000

$ lsof -i tcp:3000
$ kill -9 PID

HOST PROJECT IN VIRTUAL MACHINE
1.Port forwarding in settings in virtualbox - Setting - Network - Adapter 1- Advanced... 
2.Keep it sure that port is not being used

ESTABLISHING SSH CONNECTION FROM VSCODE TO VIRTUAL MACHINE
1. virtual machine -> etc/ssh/sshd_config -> PermitRootLogin yes -> sudo service ssh restart
2. client machine -> Users/yowoo/.ssh/config -> 
Host RANKERS
	HostName 127.0.0.1
	Port 4242
	User root

INSTALLING MYSQL sudo apt install default-mysql-server

RUN MYSQL
service mysqld start
service mysqld stop
service mysqld restart

LOGIN MYSQL
1. CONNECT MYSQL mysql -u root -p, no pw by default

2. change pw with : ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';

3. connect in express:
const db = mysql.createConnection({
  host: "127.0.0.1",
  password: "my password",
  user: "root",
  database: "RANKERS",
})

MYSQL CHEETSHEETS

CREATE DATABASE RANKERS;
USE RANKERS;

SHOW DATABASES;
SHOW TABLES;

CREATE TABLE users(
	id int NOT NULL AUTO_INCREMENT,
	email varchar(150),
	password varchar(200),
	PRIMARY KEY (id)
);

DESCRIBE users;

ALTER users 

DROP TABLE users;

CREATE TABLE matchday2(
	id int NOT NULL AUTO_INCREMENT,
	email varchar(150),
	time varchar(10),
	PRIMARY KEY (id)
);

CREATE TABLE matchday6(
	id int NOT NULL AUTO_INCREMENT,
	email varchar(150),
	time varchar(10),
	PRIMARY KEY (id),
	user_id INT,
	FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE matchday6(
	id int NOT NULL AUTO_INCREMENT,
	email varchar(150),
	time varchar(10),
	date varchar(50),
	PRIMARY KEY (id),
	user_id INT,
	FOREIGN KEY (user_id) REFERENCES users(id)
);



#3
ALTER TABLE matchday1
	ADD COLUMN user_id INT;

ALTER TABLE matchday7
	ADD FOREIGN KEY(user_id)
	REFERENCES users(id)
	ON DELETE SET NULL

FETCH VS AXIOS
https://blog.logrocket.com/axios-vs-fetch-best-http-requests/

ALTER TABLE matchday7 MODIFY time VARCHAR(10);

#1
ALTER TABLE matchday3
	DROP FOREIGN KEY matchday3_ibfk_1;

ALTER TABLE matchday3
	DROP CONSTRAINT matchday3_ibfk_1;

#2
ALTER TABLE matchday3
	DROP COLUMN user_id;

#3
ALTER TABLE matchday0
	ADD COLUMN user_id INT;

#4
ALTER TABLE matchday6
	ADD FOREIGN KEY(user_id)
	REFERENCES users(id)
	ON DELETE SET NULL
	ON UPDATE CASCADE;


SELECT CONSTRAINT_NAME
	FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
	WHERE TABLE_NAME =  'matchday1'
	AND COLUMN_NAME =  'user_id'



ALTER TABLE matchday0
	DROP FOREIGN KEY matchday0_ibfk_1,
	DROP COLUMN user_id,
	ADD COLUMN user_id INT,
	ADD FOREIGN KEY(user_id)
	REFERENCES users(id)
	ON DELETE SET NULL
	ON UPDATE CASCADE;

INSERT INTO matchday1 (`email`,`time`,`user_id`) 
VALUES ("unow1992@gmail.com", "10:00", (SELECT id FROM users WHERE `email`="unow1992@gmail.com"));

ALTER TABLE matchday6
	ADD COLUMN date varchar(10);

ALTER TABLE matchday6
	DROP COLUMN date,
	ADD COLUMN date DATE;

ALTER TABLE matchday0 MODIFY date varchar(50);
ALTER TABLE matchday1 MODIFY date varchar(50);
ALTER TABLE matchday2 MODIFY date varchar(50);
ALTER TABLE matchday3 MODIFY date varchar(50);
ALTER TABLE matchday4 MODIFY date varchar(50);
ALTER TABLE matchday5 MODIFY date varchar(50);
ALTER TABLE matchday6 MODIFY date varchar(50);

ALTER TABLE matchday0

DELETE FROM matchday4 //delete all rows

SELECT * FROM matchday0 WHERE `email`='unow1992@gmail.com' UNION SELECT * FROM matchday1 WHERE `email`='unow1992@gmail.com' UNION SELECT * FROM matchday2 WHERE `email`='unow1992@gmail.com' UNION SELECT * FROM matchday3 WHERE `email`='unow1992@gmail.com' UNION SELECT * FROM matchday4 WHERE `email`='unow1992@gmail.com' UNION SELECT * FROM matchday5 WHERE `email`='unow1992@gmail.com' UNION SELECT * FROM matchday6 WHERE `email`='unow1992@gmail.com'
JWT
Header => algorithm, type
Payload => user, data...
The payload is then Base64Url encoded to form the second part of the JSON Web Token.
Signature => To create the signature part you have t o take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.

const token = jwt.sign(payload, secret) => make token and give to client, takes PAYLOAD which is transmitted data,
and SECRETKEY, which makes token more complicated.

Verify => check token and secret 
jwt.verify(token, secret) => returns payload


auth-server: 
	/authlogin, /authsignup : sign secretkey to loginData and give back in res.
	/verify : decode submitted token and check if data exist in token.

mysqldump -u root -p RANKERS > rankers.sql;

CREATE TABLE matchday6(
	id int NOT NULL AUTO_INCREMENT,
	email varchar(150),
	time varchar(10),
	date varchar(50),
	PRIMARY KEY (id),
	user_id INT,
	FOREIGN KEY (user_id) REFERENCES users(id)
);

#User Stats
email user_id win lose rating
CREATE TABLE user_stats(
	user_id INT ,
	FOREIGN KEY (user_id) REFERENCES users(id),
	email VARCHAR(150),
	win INT DEFAULT 0,
	lose INT DEFAULT 0,
	rating INT DEFAULT 1000
)

ALTER TABLE user_stats
	ADD COLUMN email VARCHAR(150);
